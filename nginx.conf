worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # log format: JSON-ish (single-line) for easy parsing
    log_format json_combined escape=json
      '{'
        '"time":"$time_iso8601",'
        '"remote":"$remote_addr",'
        '"method":"$request_method",'
        '"path":"$request_uri",'
        '"status":"$status",'
        '"pool":"$upstream_http_x_app_pool",'
        '"release":"$upstream_http_x_release_id",'
        '"upstream_status":"$upstream_status",'
        '"upstream_addr":"$upstream_addr",'
        '"request_time":"$request_time",'
        '"upstream_response_time":"$upstream_response_time",'
        '"request_id":"$request_id"'
      '}';

    access_log /var/log/nginx/access.log json_combined;

    # Blue/Green upstream group
    upstream backend {
        # Primary (Blue)
        server app_blue:3000 max_fails=2 fail_timeout=5s;

        # Backup (Green) - used only if Blue fails
        server app_green:3000 backup;
    }

    server {
        listen 8080;

        error_page 500 502 504 = @fallback;

        location /version {
            proxy_pass http://backend/version;

            # Retry to next upstream on error, timeout, or 5xx responses
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;

            # Connection & response timeouts
            proxy_connect_timeout 1s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;

            # Forward essential client headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Preserve upstream headers
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
        }

        location @fallback {
            proxy_pass http://app_green:3000;
            proxy_set_header X-App-Pool green;
            proxy_set_header X-Release-Id $http_x_release_id;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
        }

        # Optional: health check endpoint (you can hit /health to test connectivity)
        location /healthz {
            proxy_pass http://backend/healthz;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
        }

        location  /chaos/start {
            limit_except POST { deny all; }
            proxy_pass http://backend/chaos/start;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
        }

        location  /chaos/stop {
            limit_except POST { deny all; }
            proxy_pass http://backend/chaos/stop;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
        }

    }
}
